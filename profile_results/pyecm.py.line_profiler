Timer unit: 1e-06 s

File: ./pyecm.py
Function: invert at line 76
Total time: 0.385278 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    76                                           	@profile
    77                                           	def invert(a, b):
    78                                           		'''Computes the inverse of a modulo b. b must be odd.
    79                                           
    80                                           Returns the inverse of a (mod b).'''
    81       330          556      1.7      0.1  		if a == 0 or b == 0:
    82                                           			return 0
    83                                           
    84       330          378      1.1      0.1  		truth = False
    85       330          372      1.1      0.1  		if a < 0:
    86                                           			truth = True
    87                                           			a = -a
    88                                           
    89       330          338      1.0      0.1  		b_orig = b
    90       330          338      1.0      0.1  		alpha = 1
    91       330          329      1.0      0.1  		beta = 0
    92                                           
    93       619          901      1.5      0.2  		while not a & 1:
    94       289          338      1.2      0.1  			if alpha & 1:
    95       274          387      1.4      0.1  				alpha += b_orig
    96       289          399      1.4      0.1  			alpha >>= 1
    97       289          366      1.3      0.1  			a >>= 1
    98                                           
    99       330          377      1.1      0.1  		if b > a:
   100       330          370      1.1      0.1  			a, b = b, a
   101       330          390      1.2      0.1  			alpha, beta = beta, alpha
   102                                           
   103     21408        26091      1.2      6.8  		while b != 0 and a != b:
   104     21078        24848      1.2      6.4  			a -= b
   105     21078        24044      1.1      6.2  			alpha -= beta
   106                                           
   107     62859        76304      1.2     19.8  			while not a & 1:
   108     41781        49872      1.2     12.9  				if alpha & 1:
   109     21165        25222      1.2      6.5  					alpha += b_orig
   110     41781        51776      1.2     13.4  				alpha >>= 1
   111     41781        49805      1.2     12.9  				a >>= 1
   112                                           			
   113     21078        23444      1.1      6.1  			if b > a:
   114     11335        12578      1.1      3.3  				a,b = b,a
   115     11335        12439      1.1      3.2  				alpha, beta = beta, alpha
   116                                           
   117       330          363      1.1      0.1  		if a == b:
   118       330          382      1.2      0.1  			a -= b
   119       330          401      1.2      0.1  			alpha -= beta
   120       330          382      1.2      0.1  			a, b = b, a
   121       330          360      1.1      0.1  			alpha, beta = beta, alpha
   122                                           
   123       330          393      1.2      0.1  		if a != 1:
   124         2            2      1.0      0.0  			return 0
   125                                           
   126       328          372      1.1      0.1  		if truth:
   127                                           			alpha = b_orig - alpha
   128                                           		
   129       328          361      1.1      0.1  		return alpha

File: ./pyecm.py
Function: double at line 431
Total time: 4.58844 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   431                                           @profile
   432                                           def double(p, n):
   433                                           	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                                           
   435                                           Returns the doubled list.'''
   436       265         1795      6.8      0.0  	inv = range(len(p))
   437                                           
   438    163150       173323      1.1      3.8  	for i in xrange(len(p)):
   439    162885       215997      1.3      4.7  		inv[i] = p[i][1] << 1
   440                                           
   441       265      2673990  10090.5     58.3  	inv = parallel_invert(inv, n)
   442                                           
   443       265          465      1.8      0.0  	if not isinstance(inv, list):
   444                                           		return inv
   445                                           
   446    163150       178763      1.1      3.9  	for i in xrange(len(p)):
   447    162885       191261      1.2      4.2  		x = p[i][0]
   448    162885       240950      1.5      5.3  		m = (x * x) % n
   449    162885       307393      1.9      6.7  		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450    162885       282347      1.7      6.2  		p[i][0] = (m * m - x - x) % n
   451    162885       321857      2.0      7.0  		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                                           
   453       265          299      1.1      0.0  	return p

File: ./pyecm.py
Function: parallel_invert at line 538
Total time: 2.25216 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   538                                           @profile
   539                                           def parallel_invert(l, n):
   540                                           	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                                           
   542                                           Returns the list with all elements inverted modulo 3(n-1).'''
   543       330         1471      4.5      0.1  	l_ = l[:]
   544    224050       230985      1.0     10.3  	for i in xrange(len(l)-1):
   545    223720       356301      1.6     15.8  		l[i+1] = (l[i] * l[i+1]) % n
   546                                           	
   547       330       758275   2297.8     33.7  	inv = invert(l[-1], n)
   548       330          408      1.2      0.0  	if inv == 0:
   549         2          336    168.0      0.0  		return gcd(l[-1], n)
   550                                           
   551    222856       233526      1.0     10.4  	for i in xrange(len(l)-1, 0, -1):
   552    222528       340689      1.5     15.1  		l[i] = (inv * l[i-1]) % n
   553    222528       329431      1.5     14.6  		inv = (inv * l_[i]) % n
   554       328          381      1.2      0.0  	l[0] = inv
   555                                           
   556       328          353      1.1      0.0  	return l

